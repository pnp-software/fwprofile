/**
* @page PrMain Procedure Implementation
*
* The FW Profile uses the name "Procedure" for the entity which in UML is represented as an Activity Diagram.
* Thus, procedures can be used to model a sequential flow of conditionally executed actions.
*
* The C1 Implementation represents a procedure through a <i>procedure descriptor</i> (PRD).
* A PRD is a data structure which holds all the information required to describe a procedure.
* Users do not normally manipulate the PRD directly. Instead, they manipulate the pointer to the PRD
* which is defined as an instance of type <code>::FwPrDesc_t</code>. 
* Its internal structure is described in <code>FwPrPrivate.h</code>. Most applications are not concerned
* with the internal structure of a PRD and can ignore this header file.
* <p></p>
* Applications manipulate a procedure by passing its PRD to the functions defined by the C1 Implementation.
* Thus, for instance, an application executes a procedure through the following function call: 
* <code>FwPrExecute(prDesc)</code>. 
* Here, <code>prDesc</code> is the PRD of the procedure to be executed. 
*
* @section PrMain_2 Procedure Modules
* 
* The implementation of the procedure concept consists of several modules as described in the table:
* <table border="1" cellpadding="2">
* <tr>
* <th>Module</th> <th>Description</th> <th>Files</th>
* </tr>
* <tr>
* <td><code>Core</code></td>
* <td>Provides an interface to start, stop, and execute a procedure.</td>
* <td><code>FwPrCore.h</code>, <code>FwPrCore.c</code></td>
* </tr>
* <tr>
* <td><code>DCreate</code></td>
* <td>Provides an interface to create a new PRD. The functions in this module are simple
* to use but rely on dynamic memory allocation. Applications which wish to avoid dynamic memory allocation
* can use the alternative <code>SCreate</code> module.</td>
* <td><code>FwPrDCreate.h</code>, <code>FwPrDCreate.c</code></td>
* </tr>
* <tr>
* <td><code>SCreate</code></td>
* <td>Provides macros to instantiate a new PRD (without using dynamic memory allocation) and functions
* to initialize it.
* This module is alternative to the <code>DCreate</code> module.</td>
* <td><code>FwPrSCreate.h</code>, <code>FwPrSCreate.c</code></td>
* </tr>
* <tr>
* <td><code>Config</code></td>
* <td>Provides an interface to configure a newly created PRD by defining its nodes and control flows.</td>
* <td><code>FwPrConfig.h</code>, <code>FwPrConfig.c</code></td>
* </tr>
* </table> 
* The <code>DCreate</code> and <code>SCreate</code> modules are normally alternative to each other
* (but deployment of both in the same application is possible). 
* Applications which are severely constrained in memory can instantiate and configure the PRDs of their
* procedures by directly manipulating their internal fields. 
* This requires a detailed understanding of the internal structure of the PRD but allows an application 
* to dispense with both the <code>DCreate</code>/<code>SCreate</code> modules and with the 
* <code>Config</code> module. 
* An example of direct instantiation and configuration of a PRD is provided in <code>::FwPrMakeTestPR2Dir</code>. 
* 
* @section PrMain_3 Procedure Actions and Guards
* 
* The procedure actions and guards are defined as function pointers of type, respectively,
* <code>::FwPrAction_t</code> and <code>::FwPrGuard_t</code>.
* Applications must provide functions of these two types to implement the actions and guards
* of their procedures.
* Both the guard and the action functions are called with the PRD as an argument.
* <p></p>
* Note that, if a procedure uses the same action or the same guard more than once, the 
* associated function pointer is only stored once in the PRD. 
*
* @section PrMain_4 Procedure Data
* 
* The PRD includes a field holding a pointer to the <i>procedure data</i>.
* The procedure data are data which are manipulated by the procedure actions and guards.
* The exact type of the procedure data is defined by applications for each procedure.
* In most cases, it will take the form a <code>struct</code>
* whose fields represents the inputs and outputs for the procedure actions
* and guards.
* The PRD treats the pointer to the procedure data as a pointer to <code>void</code>.
* Functions <code>::FwPrSetData</code> and <code>::FwPrGetData</code> allow this pointer to be
* set in, and be retrieved from a PRD.  
*
* @section PrMain_5 Error Checking
* 
* The procedure functions perform a limited amount of error checking.
* If they find an error, this is reported through the <i>error code</i> which stores the identifier
* of the last error encountered by the implementation.
* The value of the error code can be read with the <code>::FwPrGetErrCode</code> function.
* Nominally, the error code should be equal to <code>#prSuccess</code>.
* If this is not the case, the behaviour of the procedure is undefined.
*
* @section PrMain_8 Thread Safety
*
* The functions defined by the C1 Implementation do not use any global data. 
* They operate exclusively on the data passed to them as arguments.
* They are therefore inherently thread-safe.
*
* @section PrMain_6 Basic Usage
* 
* The basic usage of a procedure instance within an application is as follows:
* -# The procedure descriptor is created. This is most conveniently done using the <code>FwPrDCreate.h</code> module
*    but may also be done using the <code>FwPrSCreate.h</code> module (if it is desired to avoid use of dynamic memory
*    allocation).
* -# The data upon which the procedure operates is loaded into the procedure by means of function 
*    <code>::FwPrSetData</code>.
* -# The procedure is configured by means of the <code>add*</code> functions in the <code>FwPrConfig.h</code>
*    module which allow an application to define the nodes and the control flows of the procedure.
* -# The configuration of the procedure may be checked through function <code>::FwPrCheck</code>.
* -# The procedure is started with function <code>::FwPrStart</code>.
* -# The procedure is executed with function <code>::FwPrExecute</code>.
* -# The procedure is stopped with function <code>::FwPrStop</code>.
* -# If the procedure descriptor was created using the <code>FwPRDCreate.h</code> module, the memory allocated 
*    to the procedure may be released with function <code>::FwPrRelease</code>.
* <p></p>
* Examples of creation and configuration of procedures can be found in file <code>FwPrMakeTest.c</code>.
* Examples of operation of a procedure can be found in file <code>FwPrTestCases.c</code> or in the
* @ref DaMain "Demo Application".
*
* @section PrMain_7 Procedure Extension
*
* The C1 Implementation supports an extension mechanism for procedures which is similar to the inheritance-based
* extension mechanism of object-oriented languages.
* <p></p>
* A procedure (the <i>base procedure</i>) can be <i>extended</i> to create a new procedure
* (the <i>derived procedure</i>).
* A derived procedure can either be created dynamically with the <code>::FwPrCreateDer</code> function
* or else it can be instantiated statically with macro <code>#FW_PR_INST_DER</code> and initialized
* with function <code>::FwPrInitDer</code>. 
* <p></p>
* After being created, a derived procedure is a clone of its base.
* It can then be configured by: overriding its actions (through function <code>::FwPrOverrideAction</code>)
* or overriding its guards (through function <code>::FwPrOverrideGuard</code>).
* <p></p>
* The internal structure of the PRD is designed to minimize the memory requirements of derived procedures.
* A PRD is split into two parts: the <i>Base Descriptor</i> and the <i>Extension Descriptor</i> (see 
* <code>FwPrPrivate.h</code> module).
* The Base Descriptor holds the information about the procedure topology (its nodes and 
* their connections) whereas the Extension Descriptor holds the information about the procedure actions and
* guards.
* During the extension process, only the Extension Descriptor is duplicated
* whereas the Base Descriptor is shared between a procedure and its children. 
* This significantly reduces memory occupation in a situation where a large number of procedures are
* derived from the same base procedure.
* The internal structure of a procedure descriptor is shown in the figure.
* @image html PRDExtension.png
*
*/








